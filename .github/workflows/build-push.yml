name: Build & Push

on:
  workflow_run:
    workflows: ["Security Scan"]
    types: [completed]
  workflow_dispatch:
    inputs:
      version:
        description: "SemVer ohne 'v' (z.B. 1.2.3) – optional"
        required: false
        type: string

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE: ghcr.io/${{ github.repository }}          # ghcr.io/<owner>/<repo>
  OWNER: ${{ github.repository_owner }}
  REPO: ${{ github.event.repository.name }}
  TAG: latest

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (mit Tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Check available package versions (Ubuntu 24.04)
        run: |
          docker run --rm ubuntu:24.04 bash -c "set -eux; \
            apt-get update; \
            apt-cache policy apache2 mariadb-server asterisk \
              php php-cli php-common php-curl php-mysql php-xml \
              php-mbstring php-gd php-zip php-bcmath php-intl \
              sox lame tini tzdata curl ca-certificates"
      - name: Resolve Version (Tag/Release/Manual)
        id: ver
        shell: bash
        run: |
          set -euo pipefail
          VER_INPUT="${{ github.event.inputs.version || '' }}"
          VER_TAG=""
          if [ "${GITHUB_REF_TYPE}" = "tag" ]; then
            VER_TAG="${GITHUB_REF_NAME#v}"
          fi
          if [ -z "${VER_TAG}" ] && [ "${{ github.event_name }}" = "release" ]; then
            T="${{ github.event.release.tag_name }}"
            VER_TAG="${T#v}"
          fi
          VER="${VER_INPUT:-$VER_TAG}"

          if [ -z "${VER}" ]; then
            echo "version=" >> $GITHUB_OUTPUT
            echo "extra_tags=" >> $GITHUB_OUTPUT
          else
            IFS='.' read -r MAJOR MINOR PATCH <<<"${VER}"
            {
              echo "${{ env.IMAGE }}:v${VER}"
              echo "${{ env.IMAGE }}:${VER}"
              echo "${{ env.IMAGE }}:${MAJOR}.${MINOR}"
              echo "${{ env.IMAGE }}:${MAJOR}"
            } > /tmp/extra_tags.txt
            echo "version=${VER}" >> $GITHUB_OUTPUT
            echo "extra_tags=$(tr '\n' ',' < /tmp/extra_tags.txt | sed 's/,$//')" >> $GITHUB_OUTPUT
            echo "TAG=${VER}" >> $GITHUB_ENV
          fi

      - name: Docker meta (branch/latest/sha)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE }}
          tags: |
            type=ref,event=branch
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,format=short,prefix=sha-
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.version=${{ github.ref_name }}

      # ---- NEU: gepinnte Paketversionen einlesen ----
      - name: Read pinned versions (containers/${{ env.REPO }}/versions.env)
        id: versions
        shell: bash
        run: |
          set -euo pipefail
          file="containers/${{ env.REPO }}/versions.env"
          if [ ! -f "$file" ]; then
            echo "::error::versions.env fehlt unter $file (DL3008 Pinning erwartet)"
            exit 1
          fi
          # Jede NON-Comment-Zeile KEY=VALUE als Output setzen
          while IFS='=' read -r k v; do
            [[ -z "${k}" || "${k}" =~ ^# ]] && continue
            k="$(echo "$k" | tr -cd 'A-Z0-9_')"
            v="$(echo "$v" | sed 's/^"\(.*\)"$/\1/')"
            echo "$k=$v" >> "$GITHUB_OUTPUT"
          done < "$file"

      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push (multi-arch)
        uses: docker/build-push-action@v6
        with:
          context: containers/${{ env.REPO }}
          file: containers/${{ env.REPO }}/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ steps.meta.outputs.tags }}
            ${{ steps.ver.outputs.extra_tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            OWNER=${{ env.OWNER }}
            REPO=${{ env.REPO }}
            $(cat containers/${{ env.REPO }}/versions.env | xargs)
          provenance: false
          sbom: false
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # (Optional) Mini-Verify – kann erweitert werden
      # - name: Verify installed versions
      #   run: |
      #     set -euo pipefail
      #     IMG="${{ env.IMAGE }}:sha-${{ github.sha }}"
      #     docker pull "$IMG" >/dev/null 2>&1 || true
      #     docker run --rm "$IMG" bash -lc '
      #       dpkg -s asterisk | grep -E "^Version: .*${ASTERISK_VERSION}$"
      #       php -v
      #     '

      - name: Summary
        run: |
          echo "Pushed tags:"
          printf '%s\n' "${{ steps.meta.outputs.tags }}" | tr ' ' '\n' | sed 's/^/- /'
          if [ -n "${{ steps.ver.outputs.extra_tags }}" ]; then
            echo "${{ steps.ver.outputs.extra_tags }}" | tr ',' '\n' | sed 's/^/- /'
          fi
